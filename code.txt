PRIMS

#include <bits/stdc++.h>
using namespace std;
// CALCULATE MINIMUM VALUE'S INDEX
int minkey(vector<int>& key, vector<bool>& mst) {
 int min = INT_MAX, min_index = -1;
 for (int i = 0; i < mst.size(); i++) {
 if (mst[i] == false && key[i] < min) {
 min = key[i];
 min_index = i;
 }
 }
 return min_index;
}
void printMST(vector<int> parent, vector<vector<int>>& graph) {
 cout << "\nEdge\tCost\n";
 for (int i = 1; i < graph.size(); i++) {
 cout << parent[i] << " - " << i << "\t" << graph[parent[i]][i] << "\n";
 }
}
void primMST(vector<vector<int>>& graph) {
 int V = graph.size();
 vector<int> key(V, INT_MAX);
 vector<bool> mst(V, false);
 vector<int> parent(V);
 key[0] = 0;
 parent[0] = -1;
 for (int count = 0; count < V - 1; count++) {
 int u = minkey(key, mst);
 mst[u] = true;
 for (int v = 0; v < V; v++) {
 if (graph[u][v] && !mst[v] && graph[u][v] < key[v]) {
 parent[v] = u;
 key[v] = graph[u][v];
 }
 }
 }
 printMST(parent, graph);
}
int main() {
 int V;
 cout << "Enter number of vertices: ";
 cin >> V;
 vector<vector<int>> graph(V, vector<int>(V));
 cout << "Enter the adjacency matrix (enter 0 if no edge exists):\n";
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 cin >> graph[i][j];
 }
 }
 primMST(graph);
 return 0;
}
----------------------------------------------------------------------------
KRUSKAL
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
bool cmp(vector<int>& a, vector<int>& b) {
 return a[2] < b[2];
}
int findParent(vector<int>& parent, int node) {
 if (parent[node] == node)
 return node;
 return parent[node] = findParent(parent, parent[node]);
}
void makeSet(vector<int>& parent, vector<int>& rank, int n) {
 for (int i = 0; i < n; i++) {
 parent[i] = i;
 rank[i] = 0;
 }
}
void unionSet(int u, int v, vector<int>& parent, vector<int>& rank) {
 u = findParent(parent, u);
 v = findParent(parent, v);
 if (u == v) return;
 if (rank[u] < rank[v]) {
 parent[u] = v;
 } else if (rank[v] < rank[u]) {
 parent[v] = u;
 } else {
 parent[v] = u;
 rank[u]++;
 }
}
int MSTree(vector<vector<int>>& edges, int n) {
 sort(edges.begin(), edges.end(), cmp);
 vector<int> parent(n), rank(n);
 makeSet(parent, rank, n);
 int minWeight = 0;
 for (int i = 0; i < edges.size(); i++) {
 int u = findParent(parent, edges[i][0]);
 int v = findParent(parent, edges[i][1]);
 int wt = edges[i][2];
 if (u != v) {
 minWeight += wt;
 unionSet(u, v, parent, rank);
 cout << "Edge Added: " << edges[i][0] << " - " << edges[i][1] << " (Weight:
" << wt << ")\n";
 }
 }
 return minWeight;
}
int main() {
 int n, e;
 cout << "Enter number of nodes and edges: ";
 cin >> n >> e;
 vector<vector<int>> edges;
 cout << "Enter edges (u v weight):\n";
 for (int i = 0; i < e; i++) {
 int u, v, wt;
 cin >> u >> v >> wt;
 edges.push_back({u, v, wt});
 }
 int totalWeight = MSTree(edges, n);
 cout << "\nMinimum Cost of MST: " << totalWeight << endl;
 return 0;
}
-----------------------------------------------------------------------------------


#include<bits/stdc++.h>
#define ll long long
using namespace std;

// ---------- Custom Hash Functions ----------
int h1(string s, int mod) {
    ll hash = 0;
    for (char c : s) {
        hash = (hash + (ll)c) % mod;
    }
    return hash;
}

int h2(string s, int mod) {
    ll hash = 1;
    for (int i = 0; i < s.size(); i++) {
        hash = (hash + (ll)pow(19, i) * s[i]) % mod;
    }
    return hash;
}

int h3(string s, int mod) {
    ll hash = 7;
    for (char c : s) {
        hash = (hash * 31 + c) % mod;
    }
    return hash;
}

// ---------- Bloom Filter ----------
bool lookupBF(vector<bool>& bitarray, int size, string s) {
    return bitarray[h1(s, size)] && bitarray[h2(s, size)] && bitarray[h3(s, size)];
}

void insertBF(vector<bool>& bitarray, int size, string s) {
    if (lookupBF(bitarray, size, s)) {
        cout << "Already present (Bloom Filter)\n";
    } else {
        bitarray[h1(s, size)] = true;
        bitarray[h2(s, size)] = true;
        bitarray[h3(s, size)] = true;
        cout << "Inserted (Bloom Filter)\n";
    }
}

// ---------- Count-Min Sketch ----------
class CountMinSketch {
    int width, depth;
    vector<vector<int>> table;

    int getHash(int row, string s) {
        switch (row) {
            case 0: return h1(s, width);
            case 1: return h2(s, width);
            case 2: return h3(s, width);
            default: return (h1(s, width) + row) % width;
        }
    }

public:
    CountMinSketch(int w, int d) : width(w), depth(d) {
        table = vector<vector<int>>(depth, vector<int>(width, 0));
    }

    void insert(string s) {
        for (int i = 0; i < depth; ++i) {
            int idx = getHash(i, s);
            table[i][idx]++;
        }
        cout << "Inserted (Count-Min Sketch)\n";
    }

    int estimate(string s) {
        int minCount = INT_MAX;
        for (int i = 0; i < depth; ++i) {
            int idx = getHash(i, s);
            minCount = min(minCount, table[i][idx]);
        }
        return minCount;
    }

    void display() {
        cout << "\nCount-Min Sketch Table:\n";
        for (auto& row : table) {
            for (int val : row) {
                cout << val << " ";
            }
            cout << "\n";
        }
    }
};

// ---------- Main ----------
int main() {
    const int arrSize = 100;
    vector<bool> bloom(arrSize, false);
    CountMinSketch cms(100, 3); // width=100, depth=3

    while (true) {
        int choice;
        string word;
        cout << "\n--- Menu ---\n";
        cout << "1. Insert into Bloom Filter\n";
        cout << "2. Lookup in Bloom Filter\n";
        cout << "3. Insert into Count-Min Sketch\n";
        cout << "4. Estimate frequency (Count-Min Sketch)\n";
        cout << "5. Show CMS Table\n";
        cout << "6. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter word to insert in Bloom Filter: ";
                cin >> word;
                insertBF(bloom, arrSize, word);
                break;
            case 2:
                cout << "Enter word to lookup in Bloom Filter: ";
                cin >> word;
                if (lookupBF(bloom, arrSize, word))
                    cout << word << " is possibly present (Bloom Filter)\n";
                else
                    cout << word << " is definitely not present (Bloom Filter)\n";
                break;
            case 3:
                cout << "Enter word to insert in Count-Min Sketch: ";
                cin >> word;
                cms.insert(word);
                break;
            case 4:
                cout << "Enter word to estimate frequency: ";
                cin >> word;
                cout << "Estimated frequency: " << cms.estimate(word) << "\n";
                break;
            case 5:
                cms.display();
                break;
            case 6:
                cout << "Exiting.\n";
                return 0;
            default:
                cout << "Invalid choice.\n";
        }
    }
}
------------------------------------------------------------------------------------
BLOOM
#include<bits/stdc++.h>
#define ll long long
using namespace std;

int h1(string s,int arrSize){
    ll int hash=0;
    for(int i=0;i<s.size();i++){
        hash=(hash+(long long)s[i])%arrSize;
    }
return hash;

}

int h2(string s,int arrSize){
    ll int hash=1;
    for(int i=0;i<s.size();i++){
        hash= (hash+(long long)pow(19,i)*s[i])%arrSize;
    }
    return hash%arrSize;
}

int h3(string s,int arrSize){
    ll int hash=7;
    for(int i=0;i<s.size();i++){
        hash=(hash*31+s[i])%arrSize;
    }
    return hash%arrSize;
}

bool lookup(bool* bitarray,int arrSize,string s){
    int a=h1(s,arrSize);
    int b=h2(s,arrSize);
    int c=h3(s,arrSize);
    return (bitarray[a]&&bitarray[b]&&bitarray[c]);
}

void insert(bool* bitarray,int arrSize,string s){
    if(lookup(bitarray,arrSize,s)){
        cout<<"Already present";
    }
    else{
        int a=h1(s,arrSize);
        int b=h2(s,arrSize);
        int c=h3(s,arrSize);

        bitarray[a]=true;
        bitarray[b]=true;
        bitarray[c]=true;
        cout<<"Inserted";
    }
}

int main(){
    const int arrSize=100;
    bool bitarray[arrSize]={false};

    int choice;
    string word;
    while(true){
        cout<<"1.Insert\n";
        cout<<"2.Lookup\n";
        cout<<"3.Exit\n";
        cout<<"Enter your choice: ";
        cin>>choice;

        if(choice==1){
            cout<<"Enter word to insert";
            cin>>word;

            insert(bitarray,arrSize,word);
        }
        else if(choice==2){
            cout<<"Enter word to lookup:";
            cin>>word;
            if(lookup(bitarray,arrSize,word)){
                cout<<word<<"is present";
            }else{
                break;
            }
        }
    }
}
--------------------------------------------------------------------------------------
AVL TREE
#include <iostream>
#include <stack>
#include <queue>
using namespace std;

struct node {
    int data, height;
    node* left;
    node* right;
    node(int value) {
        height = 1;
        data = value;
        left = NULL;
        right = NULL;
    }
};

int height(node* root) {
    if (root == NULL) return 0;
    return root->height;
}

int getbalance(node* root) {
    if (root == NULL) return 0;
    return height(root->left) - height(root->right);
}

node* rightrotate(node* y) {
    node* x = y->left;
    node* t2 = x->right;
    x->right = y;
    y->left = t2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

node* leftrotate(node* x) {
    node* y = x->right;
    node* t2 = y->left;
    y->left = x;
    x->right = t2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

node* insert(node* root, int value) {
    if (root == NULL)
        return new node(value);
    if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);
    else
        return root;

    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getbalance(root);

    if (balance > 1 && value < root->left->data)
        return rightrotate(root);
    if (balance > 1 && value > root->left->data) {
        root->left = leftrotate(root->left);
        return rightrotate(root);
    }
    if (balance < -1 && value > root->right->data)
        return leftrotate(root);
    if (balance < -1 && value < root->right->data) {
        root->right = rightrotate(root->right);
        return leftrotate(root);
    }

    return root;
}

void inorderRec(node* root) {
    if (root == NULL) return;
    inorderRec(root->left);
    cout << root->data << " ";
    inorderRec(root->right);
}

void preorderRec(node* root) {
    if (root == NULL) return;
    cout << root->data << " ";
    preorderRec(root->left);
    preorderRec(root->right);
}

void postorderRec(node* root) {
    if (root == NULL) return;
    postorderRec(root->left);
    postorderRec(root->right);
    cout << root->data << " ";
}

void InordernonRec(node* root) {
    stack<node*> s;
    node* curr = root;
    while (curr != NULL || !s.empty()) {
        while (curr != NULL) {
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
}

void PreordernonRec(node* root) {
    if (root == NULL) return;
    stack<node*> s;
    s.push(root);
    while (!s.empty()) {
        node* curr = s.top();
        s.pop();
        cout << curr->data << " ";
        if (curr->right) s.push(curr->right);
        if (curr->left) s.push(curr->left);
    }
}

void postordernonRec(node* root) {
    if (root == NULL) return;
    stack<node*> s1, s2;
    s1.push(root);
    while (!s1.empty()) {
        node* curr = s1.top();
        s1.pop();
        s2.push(curr);
        if (curr->left) s1.push(curr->left);
        if (curr->right) s1.push(curr->right);
    }
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
}

void Levelorder(node* root) {
    if (root == NULL) return;
    queue<node*> q;
    q.push(root);
    while (!q.empty()) {
        node* curr = q.front();
        q.pop();
        cout << curr->data << " ";
        if (curr->left) q.push(curr->left);
        if (curr->right) q.push(curr->right);
    }
}

bool search(node* root, int value) {
    if (root == NULL) return false;
    if (value < root->data)
        return search(root->left, value);
    else if (value > root->data)
        return search(root->right, value);
    else
        return true;
}

node* findmin(node* root) {
    while (root->left != NULL)
        root = root->left;
    return root;
}

node* deletenode(node* root, int value) {
    if (root == NULL) return NULL;

    if (value < root->data)
        root->left = deletenode(root->left, value);
    else if (value > root->data)
        root->right = deletenode(root->right, value);
    else {
        if (root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        } else if (root->left == NULL) {
            node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == NULL) {
            node* temp = root->left;
            delete root;
            return temp;
        } else {
            node* temp = findmin(root->right);
            root->data = temp->data;
            root->right = deletenode(root->right, temp->data);
        }
    }

    // Update height
    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getbalance(root);

    // Balance the tree
    if (balance > 1 && getbalance(root->left) >= 0)
        return rightrotate(root);
    if (balance > 1 && getbalance(root->left) < 0) {
        root->left = leftrotate(root->left);
        return rightrotate(root);
    }
    if (balance < -1 && getbalance(root->right) <= 0)
        return leftrotate(root);
    if (balance < -1 && getbalance(root->right) > 0) {
        root->right = rightrotate(root->right);
        return leftrotate(root);
    }

    return root;
}

int main() {
    node* root = NULL;
    int choice, value;
    while (true) {
        cout << "\nEnter the choice:\n";
        cout << "1.Insert\n2.Delete\n3.InorderRec\n4.PreorderRec\n5.PostorderRec\n6.InordernonRec\n7.PreordernonRec\n8.PostordernonRec\n9.LevelOrder\n10.Search\n11.Exit\n";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                root = insert(root, value);
                break;
            case 2:
                cout << "Enter value to delete: ";
                cin >> value;
                root = deletenode(root, value);
                break;
            case 3:
                inorderRec(root);
                break;
            case 4:
                preorderRec(root);
                break;
            case 5:
                postorderRec(root);
                break;
            case 6:
                InordernonRec(root);
                break;
            case 7:
                PreordernonRec(root);
                break;
            case 8:
                postordernonRec(root);
                break;
            case 9:
                Levelorder(root);
                break;
            case 10:
                cout << "Enter value to search: ";
                cin >> value;
                if (search(root, value))
                    cout << "Found\n";
                else
                    cout << "Not Found\n";
                break;
            case 11:
                cout << "Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice.\n";
        }
    }
}
---------------------------------------------------------------------------
TBT
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node *left, *right;
    bool lThread, rThread;

    Node(int val) {
        data = val;
        left = right = nullptr;
        lThread = rThread = true;
    }
};

// Utility to find the leftmost node
Node* leftMost(Node* node) {
    if (!node) return nullptr;
    while (!node->lThread)
        node = node->left;
    return node;
}

// In-order traversal without recursion or stack
void inOrder(Node* root) {
    Node* curr = leftMost(root);
    while (curr != nullptr) {
        cout << curr->data << " ";

        if (curr->rThread)
            curr = curr->right;
        else
            curr = leftMost(curr->right);
    }
}

// Insert a node into the Threaded Binary Tree
Node* insert(Node* root, int key) {
    Node* parent = nullptr;
    Node* curr = root;

    while (curr != nullptr) {
        if (key == curr->data) {
            cout << "Duplicate key not allowed.\n";
            return root;
        }

        parent = curr;

        if (key < curr->data) {
            if (!curr->lThread)
                curr = curr->left;
            else
                break;
        } else {
            if (!curr->rThread)
                curr = curr->right;
            else
                break;
        }
    }

    Node* newNode = new Node(key);

    if (parent == nullptr)
        root = newNode;
    else if (key < parent->data) {
        newNode->left = parent->left;
        newNode->right = parent;
        parent->lThread = false;
        parent->left = newNode;
    } else {
        newNode->left = parent;
        newNode->right = parent->right;
        parent->rThread = false;
        parent->right = newNode;
    }

    return root;
}

int main() {
    Node* root = nullptr;
    int n;

    cout << "Enter number of sensor readings: ";
    cin >> n;

    cout << "Enter " << n << " sensor values:\n";
    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;
        root = insert(root, val);
    }

    cout << "\nSensor Data (In-order traversal without recursion/stack):\n";
    inOrder(root);
    cout << endl;

    return 0;
}
---------------------------------------------------------------------------------
HEAP 
#include<iostream>
#include<vector>
using namespace std;

void heapifyASC(vector<int>& arr,int n,int i){
    int largest=i;
    int leftchild=2*i+1;
    int rightchild=2*i+2;

    if(leftchild<n&&arr[leftchild]>arr[largest]){
        largest=leftchild;
    }
    if(rightchild<n&&arr[rightchild]>arr[largest]){
        largest=rightchild;
    }
    if(largest!=i){
        swap(arr[i],arr[largest]);
        heapifyASC(arr,n,largest);
    }
}

void heapifyDESC(vector<int>& arr,int n,int i){
    int smallest=i;
    int leftchild=2*i+1;
    int rightchild=2*i+2;

    if(leftchild<n&&arr[leftchild]<arr[smallest]){
        smallest=leftchild;
    }
    if(rightchild<n&&arr[rightchild]<arr[smallest]){
        smallest=rightchild;
    }
    if(smallest!=i){
        swap(arr[i],arr[smallest]);
        heapifyDESC(arr,n,smallest);
    }
}

void heapSortASC(vector<int>& arr){
    int n=arr.size();
    for(int i=n/2-1;i>=0;i--){
        heapifyASC(arr,n,i);
    }

    for(int i=n-1;i>0;i--){
        swap(arr[0],arr[i]);
        heapifyASC(arr,i,0);
    }
}

void heapSortDesc(vector<int>& arr){
    int n=arr.size();
    for(int i=n/2-1;i>=0;i--){
        heapifyDESC(arr,n,i);
    }

    for(int i=n-1;i>0;i--){
        swap(arr[0],arr[i]);
        heapifyDESC(arr,i,0);
    }
}

void printArray(const vector<int>& arr){
    for(int num:arr){
        cout<<num<<" ";
    }cout<<endl;
}


int main(){
    int order,n;
    cout<<"Enter the number of elemnets to be inserted:";
    cin>>n;
    vector<int> arr;
    cout<<"Enter "<<n<<"elements:\n";
    for(int i=0;i<n;i++){
        int value;
        cin>>value;
        arr.push_back(value);
    }
    cout<<"Enter choice 1.ASC 2.DESC";
    cin>>order;

    if(order==1){
        heapSortASC(arr);
        cout<<"Ascending order is";
        printArray(arr);
    }else if(order==2){
        heapSortDesc(arr);
        cout<<"Descending order is:";
        printArray(arr);
    }
}
